<?php

namespace Academic\ProjectBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Academic\ProjectBundle\Entity\Issue;
use Doctrine\ORM\Query\Expr\Join;

/**
 * IssueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IssueRepository extends EntityRepository
{
    public function getOpenStatus()
    {
        $qb =$this->getEntityManager()->createQueryBuilder();
        $qb
            ->from('AcademicProjectBundle:IssueStatus', 's')
            ->select('s')
            ->where('s.status_code =:status_code')
            ->setParameter('status_code', 'OPENED');

        $issue_status = $qb->getQuery()->getSingleResult();
        return $issue_status;
    }

    public function getClosedStatus()
    {
        $qb =$this->getEntityManager()->createQueryBuilder();
        $qb
            ->from('AcademicProjectBundle:IssueStatus', 's')
            ->select('s')
            ->where('s.status_code =:status_code')
            ->setParameter('status_code', 'CLOSED');

        $issue_status = $qb->getQuery()->getSingleResult();
        return $issue_status;
    }

    public function getInProgressStatus()
    {
        $qb =$this->getEntityManager()->createQueryBuilder();
        $qb
            ->from('AcademicProjectBundle:IssueStatus', 's')
            ->select('s')
            ->where('s.status_code =:status_code')
            ->setParameter('status_code', 'IN_PROGRESS');

        $issue_status = $qb->getQuery()->getSingleResult();
        return $issue_status;
    }

    public function getResolutionResolved()
    {
        $qb =$this->getEntityManager()->createQueryBuilder();
        $qb
            ->from('AcademicProjectBundle:IssueResolution', 's')
            ->select('s')
            ->where('s.resolution_code =:resolution_code')
            ->setParameter('resolution_code', 'RESOLVED');

        $issue_resolution = $qb->getQuery()->getSingleResult();
        return $issue_resolution;
    }

    public function getResolutionUnResolved()
    {
        $qb =$this->getEntityManager()->createQueryBuilder();
        $qb
            ->from('AcademicProjectBundle:IssueResolution', 's')
            ->select('s')
            ->where('s.resolution_code =:resolution_code')
            ->setParameter('resolution_code', 'UNRESOLVED');

        $issue_resolution = $qb->getQuery()->getSingleResult();
        return $issue_resolution;
    }

    public function getResolutionReopened()
    {
        $qb =$this->getEntityManager()->createQueryBuilder();
        $qb
            ->from('AcademicProjectBundle:IssueResolution', 's')
            ->select('s')
            ->where('s.resolution_code =:resolution_code')
            ->setParameter('resolution_code', 'REOPENED');

        $issue_resolution = $qb->getQuery()->getSingleResult();
        return $issue_resolution;
    }

    public function getCollaboratorIssues($collaboratorId)
    {
        $openStatus = $this->getOpenStatus();
        $inProgressStatus = $this->getInProgressStatus();
        $qb =$this->getEntityManager()->createQueryBuilder();
        $qb
            ->from('AcademicProjectBundle:Issue', 'i')
            ->select('i')
            ->leftJoin('AcademicUserBundle:User', 'u', Join::WITH, 'u MEMBER OF i.collaborators')
            ->where('u.id = :user AND (i.status = :open_status or i.status = :in_progress_status)')
            ->setParameter('user', $collaboratorId)
            ->setParameter('open_status', $openStatus->getId())
            ->setParameter('in_progress_status', $inProgressStatus->getId());
        return $qb->getQuery()->getResult();
    }

    public function getAssigneeIssues($assigneeId)
    {
        $openStatus = $this->getOpenStatus();
        $inProgressStatus = $this->getInProgressStatus();
        $qb =$this->getEntityManager()->createQueryBuilder();
        $qb
            ->from('AcademicProjectBundle:Issue', 'i')
            ->select('i')
            ->leftJoin('AcademicUserBundle:User', 'u', Join::WITH, 'u = i.assignee')
            ->where('u.id = :user AND (i.status = :open_status or i.status = :in_progress_status)')
            ->setParameter('user', $assigneeId)
            ->setParameter('open_status', $openStatus->getId())
            ->setParameter('in_progress_status', $inProgressStatus->getId());
        return $qb->getQuery()->getResult();
    }

    public function getIssuePriorityByWeight($weight)
    {
        $qb =$this->getEntityManager()->createQueryBuilder();
        $qb
            ->from('AcademicProjectBundle:IssuePriority', 'p')
            ->select('p')
            ->where('p.weight = :weight')
            ->setParameter('weight', $weight);

        $issue_priority = $qb->getQuery()->getSingleResult();
        return $issue_priority;
    }
}
